@page "/users"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Nav
@inject CRUDOPproject.Data.AppDbContext _context
@using CRUDOPproject.Models

<h3>Users</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success">@message</div>
}

<a class="btn btn-success mb-3" href="/users/create">âž• Add User</a>

@if (users is null || !users.Any())
{
    <div class="alert alert-info">No users found.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Username</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in users)
            {
                <tr>
                    <td>@u.Id</td>
                    <td>@u.Username</td>
                    <td>@u.Email</td>
                    <td>
                        <a class="btn btn-primary btn-sm me-2" href="/users/edit/@u.Id">Edit</a>
                        <a class="btn btn-danger btn-sm" href="/users/delete/@u.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User>? users;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        users = await _context.Users.ToListAsync();

        // Read query string for "msg"
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("msg", out var msgValue))
        {
            message = msgValue;
        }
    }
}
